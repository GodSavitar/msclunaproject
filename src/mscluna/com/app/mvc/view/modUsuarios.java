/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mscluna.com.app.mvc.view;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.sql.*;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import mscluna.com.app.mvc.controller.ConexionBD;
import mscluna.com.app.mvc.controller.Sesion;

/**
 *
 * @author luiis
 */
public class modUsuarios extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(modUsuarios.class.getName());
        private int idUsuarioSeleccionado = -1;
    /**
     * Creates new form modUsuarios
     */
        public modUsuarios() {
         initComponents();
         cargarCajerosDisponibles();
         cargarTodosLosUsuariosEnTabla();
         setCamposEdicionHabilitados(false);
         this.setLocationRelativeTo(null);
         this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
         }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usuariosTable = new javax.swing.JTable();
        modificarUsuariosLabel = new javax.swing.JLabel();
        usuarioBuscado = new javax.swing.JTextField();
        buscarCajeroButton = new javax.swing.JButton();
        seleccionarCajeroEditar = new javax.swing.JComboBox<>();
        usuEditLabel = new javax.swing.JLabel();
        passLabel = new javax.swing.JLabel();
        usuarioEditPass = new javax.swing.JPasswordField();
        enviarDatosComprobar = new javax.swing.JButton();
        NewUserEditLabel = new javax.swing.JLabel();
        newUsuarioEditado = new javax.swing.JTextField();
        newNombreEditLabel = new javax.swing.JLabel();
        newNombreEditado = new javax.swing.JTextField();
        newPassEditLabel = new javax.swing.JLabel();
        newPassEditada = new javax.swing.JPasswordField();
        realizarCambiosEdicion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        usuariosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(usuariosTable);

        modificarUsuariosLabel.setBackground(new java.awt.Color(0, 205, 203));
        modificarUsuariosLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        modificarUsuariosLabel.setForeground(new java.awt.Color(255, 255, 255));
        modificarUsuariosLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        modificarUsuariosLabel.setText("Modificar Usuarios");
        modificarUsuariosLabel.setOpaque(true);

        usuarioBuscado.setBackground(new java.awt.Color(255, 255, 255));
        usuarioBuscado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        buscarCajeroButton.setBackground(new java.awt.Color(65, 220, 127));
        buscarCajeroButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        buscarCajeroButton.setIcon(new ImageIcon(getClass().getResource("/mscluna/com/app/mvc/images/resourceLupaWhite.png")));

        usuEditLabel.setForeground(new java.awt.Color(0, 0, 0));
        usuEditLabel.setText("Usuario a editar:");

        passLabel.setForeground(new java.awt.Color(0, 0, 0));
        passLabel.setText("Contraseña:");

        enviarDatosComprobar.setBackground(new java.awt.Color(65, 220, 127));
        enviarDatosComprobar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        enviarDatosComprobar.setForeground(new java.awt.Color(255, 255, 255));
        enviarDatosComprobar.setText("Enviar");
        enviarDatosComprobar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarDatosComprobarActionPerformed(evt);
            }
        });

        NewUserEditLabel.setForeground(new java.awt.Color(0, 0, 0));
        NewUserEditLabel.setText("Nuevo usuario:");

        newUsuarioEditado.setEnabled(false);

        newNombreEditLabel.setForeground(new java.awt.Color(0, 0, 0));
        newNombreEditLabel.setText("Nuevo nombre:");

        newNombreEditado.setEnabled(false);

        newPassEditLabel.setForeground(new java.awt.Color(0, 0, 0));
        newPassEditLabel.setText("Nueva Contraseña:");

        newPassEditada.setEnabled(false);

        realizarCambiosEdicion.setBackground(new java.awt.Color(65, 220, 127));
        realizarCambiosEdicion.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        realizarCambiosEdicion.setForeground(new java.awt.Color(255, 255, 255));
        realizarCambiosEdicion.setText("Realizar Cambios");
        realizarCambiosEdicion.setEnabled(false);
        realizarCambiosEdicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realizarCambiosEdicionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(usuarioBuscado, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buscarCajeroButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(modificarUsuariosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 762, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(51, 51, 51)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(usuEditLabel)
                                                .addGap(14, 14, 14))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(NewUserEditLabel)
                                                    .addComponent(passLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(9, 9, 9))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addComponent(newNombreEditLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(newPassEditLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(newPassEditada, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newUsuarioEditado, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(usuarioEditPass, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newNombreEditado, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                    .addComponent(seleccionarCajeroEditar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(enviarDatosComprobar))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(realizarCambiosEdicion)
                                .addGap(122, 122, 122)))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modificarUsuariosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buscarCajeroButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usuarioBuscado, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usuEditLabel)
                            .addComponent(seleccionarCajeroEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(passLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usuarioEditPass, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enviarDatosComprobar))
                        .addGap(56, 56, 56)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NewUserEditLabel)
                            .addComponent(newUsuarioEditado, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(newNombreEditado, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newNombreEditLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newPassEditLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newPassEditada, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(54, 54, 54)
                        .addComponent(realizarCambiosEdicion)))
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
private void cargarTodosLosUsuariosEnTabla() {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("ID");
    model.addColumn("Usuario");
    model.addColumn("Nombre Completo");
    model.addColumn("Admin");
    try (Connection conn = ConexionBD.getConexion(
            Sesion.getUsuario(),
            Sesion.getContrasena(),
            Sesion.getBaseDatos())) {
        String sql = "SELECT id, usuario, nombre_completo, permiso_administrador FROM usuarios";
        try (PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                int id = rs.getInt("id");
                String usuario = rs.getString("usuario");
                String nombre = rs.getString("nombre_completo");
                boolean admin = rs.getInt("permiso_administrador") == 1;
                model.addRow(new Object[]{id, usuario, nombre, admin ? "Sí" : "No"});
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar usuarios: " + e.getMessage());
    }
    usuariosTable.setModel(model);
}

    private void cargarCajerosDisponibles() {
        seleccionarCajeroEditar.removeAllItems();
        try (Connection conn = ConexionBD.getConexion(
                Sesion.getUsuario(),
                Sesion.getContrasena(),
                Sesion.getBaseDatos())) {
            String sql = "SELECT usuario FROM usuarios";
            try (PreparedStatement ps = conn.prepareStatement(sql);
                 ResultSet rs = ps.executeQuery()) {
                boolean hayResultados = false;
                while (rs.next()) {
                    seleccionarCajeroEditar.addItem(rs.getString("usuario"));
                    hayResultados = true;
                }
                if (!hayResultados) {
                    seleccionarCajeroEditar.addItem("No hay cajeros");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar cajeros: " + e.getMessage());
        }
    }

    private int obtenerIdUsuario(String usuario) {
        try (Connection conn = ConexionBD.getConexion(
                Sesion.getUsuario(),
                Sesion.getContrasena(),
                Sesion.getBaseDatos())) {
            String sql = "SELECT id FROM usuarios WHERE usuario = ?";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, usuario);
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        return rs.getInt("id");
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al buscar usuario: " + e.getMessage());
        }
        return -1;
    }

    private String obtenerContrasenaUsuario(int idUsuario) {
        try (Connection conn = ConexionBD.getConexion(
                Sesion.getUsuario(),
                Sesion.getContrasena(),
                Sesion.getBaseDatos())) {
            String sql = "SELECT contrasena FROM usuarios WHERE id = ?";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setInt(1, idUsuario);
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        return rs.getString("contrasena");
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al obtener contraseña: " + e.getMessage());
        }
        return null;
    }

    // Habilita o deshabilita los campos de edición
    private void setCamposEdicionHabilitados(boolean enabled) {
        newUsuarioEditado.setEnabled(enabled);
        newNombreEditado.setEnabled(enabled);
        newPassEditada.setEnabled(enabled);
        realizarCambiosEdicion.setEnabled(enabled);
    }

    private void enviarDatosComprobarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarDatosComprobarActionPerformed
        String usuarioSeleccionado = (String) seleccionarCajeroEditar.getSelectedItem();
        if (usuarioSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Selecciona un cajero.");
            return;
        }
        idUsuarioSeleccionado = obtenerIdUsuario(usuarioSeleccionado);
        if (idUsuarioSeleccionado == -1) {
            JOptionPane.showMessageDialog(this, "No se encontró el cajero seleccionado.");
            return;
        }
        String passIngresada = new String(usuarioEditPass.getPassword());
        String passBD = obtenerContrasenaUsuario(idUsuarioSeleccionado);

        if (passBD == null) {
            JOptionPane.showMessageDialog(this, "Error al obtener la contraseña del usuario.");
            return;
        }

        // Si tu sistema guarda las contraseñas hasheadas, aquí deberías aplicar el mismo hash antes de comparar
        if (!passIngresada.equals(passBD)) {
            JOptionPane.showMessageDialog(this, "Contraseña incorrecta.");
            setCamposEdicionHabilitados(false);
            return;
        }

        // Habilitar campos para editar
        setCamposEdicionHabilitados(true);

        // Precarga los datos actuales del usuario para editar
        cargarDatosActualesUsuario(idUsuarioSeleccionado);
    }//GEN-LAST:event_enviarDatosComprobarActionPerformed
    private void cargarDatosActualesUsuario(int idUsuario) {
        try (Connection conn = ConexionBD.getConexion(
                Sesion.getUsuario(),
                Sesion.getContrasena(),
                Sesion.getBaseDatos())) {
            String sql = "SELECT usuario, nombre_completo, contrasena FROM usuarios WHERE id = ?";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setInt(1, idUsuario);
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        newUsuarioEditado.setText(rs.getString("usuario"));
                        newNombreEditado.setText(rs.getString("nombre_completo"));
                        newPassEditada.setText(rs.getString("contrasena"));
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar datos del usuario: " + e.getMessage());
        }
    }

    private void realizarCambiosEdicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realizarCambiosEdicionActionPerformed
        if (idUsuarioSeleccionado == -1) {
            JOptionPane.showMessageDialog(this, "Primero selecciona y comprueba un usuario.");
            return;
        }
        String nuevoUsuario = newUsuarioEditado.getText().trim();
        String nuevoNombre = newNombreEditado.getText().trim();
        String nuevaPass = new String(newPassEditada.getPassword()).trim();

        if (nuevoUsuario.isEmpty() || nuevoNombre.isEmpty() || nuevaPass.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Completa todos los campos.");
            return;
        }

        int respuesta = JOptionPane.showConfirmDialog(this,
                "¿Estás seguro de realizar estos cambios?",
                "Confirmar cambios",
                JOptionPane.YES_NO_OPTION);

        if (respuesta != JOptionPane.YES_OPTION) return;

        try (Connection conn = ConexionBD.getConexion(
                Sesion.getUsuario(),
                Sesion.getContrasena(),
                Sesion.getBaseDatos())) {
            String sql = "UPDATE usuarios SET usuario = ?, nombre_completo = ?, contrasena = ? WHERE id = ?";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, nuevoUsuario);
                ps.setString(2, nuevoNombre);
                ps.setString(3, nuevaPass); // Si usas hash, aquí aplica el hash
                ps.setInt(4, idUsuarioSeleccionado);

                int filas = ps.executeUpdate();
                if (filas > 0) {
                    JOptionPane.showMessageDialog(this, "Usuario actualizado correctamente.");
                    setCamposEdicionHabilitados(false);
                    cargarCajerosDisponibles();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo actualizar el usuario.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar usuario: " + e.getMessage());
        }
         cargarTodosLosUsuariosEnTabla();
    }//GEN-LAST:event_realizarCambiosEdicionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new modUsuarios().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel NewUserEditLabel;
    private javax.swing.JButton buscarCajeroButton;
    private javax.swing.JButton enviarDatosComprobar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel modificarUsuariosLabel;
    private javax.swing.JLabel newNombreEditLabel;
    private javax.swing.JTextField newNombreEditado;
    private javax.swing.JLabel newPassEditLabel;
    private javax.swing.JPasswordField newPassEditada;
    private javax.swing.JTextField newUsuarioEditado;
    private javax.swing.JLabel passLabel;
    private javax.swing.JButton realizarCambiosEdicion;
    private javax.swing.JComboBox<String> seleccionarCajeroEditar;
    private javax.swing.JLabel usuEditLabel;
    private javax.swing.JTextField usuarioBuscado;
    private javax.swing.JPasswordField usuarioEditPass;
    private javax.swing.JTable usuariosTable;
    // End of variables declaration//GEN-END:variables
}
